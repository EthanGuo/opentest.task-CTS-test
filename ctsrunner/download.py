#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Download CTS source package and media resouce packages.
"""

import sys
import os
import requests
import re
from zipfile import ZipFile
import subprocess

RELEASE = "http://source.android.com/compatibility/downloads.html"
RELEASEPATH = r'https://dl\.google\.com/dl/android/cts/android-cts-'


def command(cmd):
    proc = subprocess.Popen(
        cmd.split(),
        shell=False,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    out = proc.communicate()
    return out


def _androidVersion():
    out = command("adb shell getprop ro.build.version.release")[0]
    m = re.search(r'(\d+(\.\d+)+)', out)
    return m.group() if m else None

androidVersion = _androidVersion()


def checkEnvironment():
    adbret = command("which adb")[0]
    if adbret.find("adb") == -1:
        print "Error: please add adb to your system environment!"
        sys.exit(1)

    buildType = command("adb shell getprop ro.build.type")[0]
    if buildType.find("userdebug") != -1 or buildType.find("eng") != -1:
        print "Error: CTS test should be performed on user build only!"
        sys.exit(2)


def extractPackage(packagename, path=None):
    print("Extrating %s..." % packagename)
    if os.path.exists(packagename):
        path = path if path else '.'
        with ZipFile(packagename, 'r') as zipped:
            zipped.extractall(path)
    else:
        print "Error: Extracting %s failed!" % (packagename)
        sys.exit(5)


def retriveUrl():
    r = requests.get(RELEASE)

    def wrapper(key):
        match = re.search("%s%s%s" % (RELEASEPATH, key, "(.)*.zip"), r.text)
        if not match:
            print "Error: No matched packages on download site!"
            sys.exit(4)
        return match.group()
    return wrapper

getURL = retriveUrl()


def downloadPackage(url, localName):
    print('Downloading %s ...' % url)
    r = requests.get(url, stream=True)
    with open(localName, 'wb') as source:
        while True:
            try:
                source.write(r.iter_content(chunk_size=1000000).next())
            except StopIteration:
                break
    return localName


def downloadPackages():
    if androidVersion is None:
        print("Error: Couldn't get android version.")
        sys.exit(1)
    packages = [
        (getURL(androidVersion), 'cts_%s.zip' % androidVersion, None),
        (getURL('media'), 'cts_media.zip', 'cts_media')
    ]
    for url, localName, extractName in packages:
        downloadPackage(url, localName)
        extractPackage(localName, extractName)


def download():
    checkEnvironment()
    downloadPackages()


if __name__ == "__main__":
    download()
