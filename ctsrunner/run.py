#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Run cts REPL.

Usage:
    run.py run cts --plan <plan_name>
    run.py run cts (--package|-p) <package_name>
    run.py run cts (--class|-c) <class_name>
    run.py -h | --help

Options:
  -h --help     Show this screen.
"""

import re
import subprocess
from docopt import docopt

CTSCONSOLE = 'android-cts/tools/cts-tradefed'


def cts_console(args, filter=None):
    print("cts_console running '%s' now..." % ' '.join(args))
    proc = subprocess.Popen(
        [CTSCONSOLE] + args,
        shell=False,
        stdin=subprocess.PIPE,
        stderr=subprocess.PIPE,
        stdout=subprocess.PIPE)
    result = None
    for line in proc.stdout:
        print line,
        if filter:
            result = filter(line) or result
    return result


def filter_result(line):
    return re.search(r'^(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+[\d\._]+', line)


def cts_run(args):
    cts_console(args)
    result = cts_console(['l', 'r'], filter_result)
    return (s for s in result.groups())


def run(args):
    session, passed, failed, notexec = cts_run(args)
    if notexec != '0':
        print('Error: %s not executed!' % notexec)
        exit(1)

    if failed != '0':
        print('Re-run failed cases...')
        plan_name = 'failed_plan_of_session_%s' % session
        cts_console(['add',
                     'derivedplan',
                     '--plan',
                     plan_name,
                     '-s',
                     session,
                     '-r',
                     'fail'])
        session, passed, failed, notexec = cts_run(['run',
                                                    'cts',
                                                    '--plan',
                                                    plan_name])
        if failed != '0' or notexec != '0':
            print('Error: %s failed and %s not executed!' % (failed, notexec))
            exit(1)

if __name__ == "__main__":
    arguments = docopt(__doc__)
    if arguments['cts'] and arguments['run']:
        if arguments['--plan']:
            run(['run', 'cts', '--plan', arguments['<plan_name>']])
        elif arguments['-p'] or arguments['--package']:
            run(['run', 'cts', '-p', arguments['<package_name>']])
        elif arguments['-c'] or arguments['--class']:
            run(['run', 'cts', '-c', arguments['<class_name>']])
