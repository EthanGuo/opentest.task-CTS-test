#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""

Download CTS source package and media resouce package then start the test on device connected.

"""
import commands, sys, os, time
import requests, re
from zipfile import ZipFile
import subprocess
import psutil

RELEASE = "http://source.android.com/compatibility/downloads.html"
RELEASEPATH = 'https://dl.google.com/dl/android/cts/android-cts-'

CTSDELEGATING = '/android-cts/repository/testcases/CtsDelegatingAccessibilityService.apk'
CTSADMIN = '/android-cts/repository/testcases/CtsDeviceAdmin.apk'
CTSCONSOLE = '/android-cts/tools/cts-tradefed'
COPYMEDIA = '/cts_media/copy_media.sh' 

class CTS(object):
    def __init__(self):
        self.AndroidVersion = None
        self.CTSPackage = None
        self.MediaPackage = 'cts_media.zip'

    def __call__(self):
        self.__checkEnvironment()
        self.__downloadCTSPackage()
        self.__downloadMediaFiles()
        self.__setupPreConditions()
        self.__startCTS()

    def __checkEnvironment(self):
        adbret = commands.getoutput("which adb")
        if adbret.find("adb") == -1:
            print "Error: please add adb to your system environment!"
            sys.exit()

        BuildType = commands.getoutput("adb shell getprop ro.build.type")
        if BuildType.find("userdebug") != -1 or BuildType.find("eng") != -1:
            print "Error: CTS test should be performed on user build only!"
            sys.exit()
        p = subprocess.Popen("adb shell getprop ro.build.version.release".split(), shell=False, stdout=subprocess.PIPE)
        self.AndroidVersion = p.stdout.readline().replace("\r", '')
        p.terminate()
        #self.AndroidVersion = commands.getoutput("adb shell getprop ro.build.version.release").replace("\r", '')

    def __extractPackage(self, packagename, path=None):
        print "Extrating %s..." %(packagename)
        if os.path.exists('/'.join([os.getcwd(), packagename])):
            path = '/'.join([os.getcwd(), path]) if path else os.getcwd()
            with ZipFile(packagename, 'r') as zipped:
                zipped.extractall(path)
        else:
            print "Error: Download %s failed, script's going to exit!" %(packagename)
            sys.exit()

    def __getURL(self, key):
        r = requests.get(RELEASE)
        url = re.search("%s%s%s" %(RELEASEPATH, key, "(.)*.zip"), r.text)
        if not url:
            print "Error: The Android version of your device is not an official release of Google!"
            sys.exit()
        return url.group()

    def __downloadCTSPackage(self):
        print "Downloading the CTS source package..."
        #r = requests.get(self.__getURL("4.0.3"), stream=True)
        r = requests.get(self.__getURL(self.AndroidVersion), stream=True)
        self.CTSPackage = 'cts_%s.zip' %(self.AndroidVersion)
        with open(self.CTSPackage, 'wb') as source:
            while True:
                try:
                    source.write(r.iter_content(chunk_size=10000000).next())
                except StopIteration:
                    break
        self.__extractPackage(self.CTSPackage)

    def __downloadMediaFiles(self):
        print "Downloading the Media resource package..."
        r = requests.get(self.__getURL("media"), stream=True)
        with open(self.MediaPackage, 'wb') as source:
            while True:
                try:
                    source.write(r.iter_content(chunk_size=10000000).next())
                except StopIteration:
                    break
        self.__extractPackage(self.MediaPackage, 'cts_media')

    def __confirm(self):
        raw_input("press \"Enter\" to continue...")

    def __setupPreConditions(self):
        if os.path.exists('/'.join([os.getcwd(), CTSCONSOLE])):
            ret = commands.getoutput("chmod 777 %s" %('/'.join([os.getcwd(), CTSCONSOLE])))
        if os.path.exists('/'.join([os.getcwd(), COPYMEDIA])):
            ret = commands.getoutput("chmod 777 %s" %('/'.join([os.getcwd(), COPYMEDIA])))
            if not ret:
                os.chdir('/'.join([os.getcwd(), 'cts_media']))
                print "Copying media files to device..."
                commands.getoutput(". ./copy_media.sh all")
                os.chdir(os.pardir)
        # Install CtsDelegatingAccessibilityService.apk
        if os.path.exists('/'.join([os.getcwd(), CTSDELEGATING])):
            ret = commands.getoutput("adb install -r %s" %('/'.join([os.getcwd(), CTSDELEGATING])))
            if "Success" in ret:
                print "On the device, enable Settings > Accessibility > Delegating Accessibility Service"
                self.__confirm()
        # Install CtsDeviceAdmin.apk
        if os.path.exists('/'.join([os.getcwd(), CTSADMIN])):
            ret = commands.getoutput("adb install -r %s" %('/'.join([os.getcwd(), CTSADMIN])))
            if "Success" in ret:
                print "On the device, enable the two android.deviceadmin.cts.CtsDeviceAdminReceiver*device administrators under Settings > Location & security > Select device administrators"
                self.__confirm()

    def __terminate(self, pid):
        parent = psutil.Process(pid)
        if parent.is_running():
            for child in parent.get_children(True):
                if child.is_running():
                    child.terminate()
            parent.terminate()

    def __startCTS(self):
        print "The test is starting now..."
        p = subprocess.Popen(("%s run cts --plan CTS" %('/'.join([os.getcwd(), CTSCONSOLE]))).split(), shell=False, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
        while True:
            line = p.stdout.readline()
            if line:
                sys.stdout.write(line)
                sys.stdout.flush()
            if "Time:" in line:
                time.sleep(5)
                self.__terminate(p.pid)
                print "Task Done!"
                break
        sys.exit()

if __name__ == "__main__":
    CTS()()
