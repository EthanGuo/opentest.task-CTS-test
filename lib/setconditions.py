#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os, commands
from config import CTSCONSOLE, COPYMEDIA, CTSDELEGATING, CTSADMIN

def installApk(apk):
    if os.path.exists('/'.join([os.getcwd(), apk])):
        if "Success" not in commands.getoutput("adb install -r %s" %('/'.join([os.getcwd(), apk]))):
            print "Install Apk into device failed!"
            sys.exit()
    else:
        print "Can not find %s" %(apk)
        sys.exit()

def setDeviceAdmin():
    installApk(CTSADMIN)
    from uiautomator import device as d
    commands.getoutput('adb shell am start -a android.settings.SECURITY_SETTINGS')
    d(className='android.widget.ListView',
      scrollable=True).scroll.vert.to(text="Device administrators")
    d(text="Device administrators").click()

    texts = ['android.deviceadmin.cts.CtsDeviceAdminReceiver',
             'android.deviceadmin.cts.CtsDeviceAdminReceiver2',
             'android.deviceadmin.cts.CtsDeviceAdminDeactivatedReceiver']
    for text in texts:
        if d(text=text).exists:
            if d(text=text).right(className='android.widget.CheckBox').checked:
                print('%s already checked!' % text)
            else:
                print('Check %s.' % text)
                d(text=text).right(className='android.widget.CheckBox').click()
                d(text='Activate').click()
    d.press.back()
    d.press.back()
    d.press.home()

def setDelegatingAccessibility():
    installApk(CTSDELEGATING)
    from uiautomator import device as d
    commands.getoutput("adb shell am start -a android.settings.ACCESSIBILITY_SETTINGS")
    if d(text="android.accessibilityservice.delegate.DelegatingAccessibilityService").exists:
        d(text="android.accessibilityservice.delegate.DelegatingAccessibilityService").click()
    
        if d(className='android.widget.Switch').checked:
            print "Enabled already!"
        else:
            d(text='OFF').click()
            d(text='OK').click()
    d.press.back()
    d.press.back()
    d.press.home()

def setTwoApks():
    if os.path.exists('/'.join([os.getcwd(), CTSDELEGATING])):
        ret = commands.getoutput("adb install -r %s" %('/'.join([os.getcwd(), CTSDELEGATING])))
        if "Success" in ret:
            print "On the device, enable Settings > Accessibility > Delegating Accessibility Service"
            raw_input("press \"Enter\" to continue...")
    if os.path.exists('/'.join([os.getcwd(), CTSADMIN])):
        ret = commands.getoutput("adb install -r %s" %('/'.join([os.getcwd(), CTSADMIN])))
        if "Success" in ret:
            print "On the device, enable the two android.deviceadmin.cts.CtsDeviceAdminReceiver*device administrators under Settings > Location & security > Select device administrators"
            raw_input("press \"Enter\" to continue...")

EXTRAAPKS = {'1.6': [setTwoApks], '2.1': [setTwoApks], '2.2': [setTwoApks],
             '2.3': [setTwoApks], '4.0.3': [setTwoApks],
             '4.1': [setDeviceAdmin, setDelegatingAccessibility],
             '4.2': [setDeviceAdmin, setDelegatingAccessibility],
             '4.3': [setDeviceAdmin],
             '4.4': [setDeviceAdmin],}

def setConditions(AndroidVersion):
    if os.path.exists('/'.join([os.getcwd(), CTSCONSOLE])):
        ret = commands.getoutput("chmod 777 %s" %('/'.join([os.getcwd(), CTSCONSOLE])))
    if os.path.exists('/'.join([os.getcwd(), COPYMEDIA])):
        ret = commands.getoutput("chmod 777 %s" %('/'.join([os.getcwd(), COPYMEDIA])))
        if not ret:
            os.chdir('/'.join([os.getcwd(), 'cts_media']))
            print "Copying media files to device..."
            commands.getoutput(". ./copy_media.sh all")
            os.chdir(os.pardir)
    # Install extra apks into device.
    for func in EXTRAAPKS[AndroidVersion]:
        func()